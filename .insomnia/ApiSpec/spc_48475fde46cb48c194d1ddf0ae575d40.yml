_id: spc_48475fde46cb48c194d1ddf0ae575d40
type: ApiSpec
parentId: wrk_00d12645ab7c4b6f98f7671a1440aec1
modified: 1631113119617
created: 1631112264481
fileName: dpm.yaml
contents: >-
  swagger: '2.0'

  info:
    version: '1.0.0'
    title: User Management
    description: User authentication API

  # tags are used for organizing operations

  tags:

  - name: auth

  - name: users

  - name: favorites

  - name: recents

  - name: groups

  - name: solutions

  - name: instances

  - name: permissions

  - name: organizations

  - name: 2fa

  - name: logs


  paths:
    /is_autha/:
      get:
        tags:
        - auth
        summary: check if user exists
        operationId: is_auth
        description: |
          Authenticate a user through an access token 
        produces:
        - application/json
        parameters:
        - in: header
          name: Authorization
          description: auth token like "Bearer {token}"
          required: true
          type: string
        responses:
          200:
            description: Estructura
            schema:
              type: object
              properties:
                Authorized:
                  type: boolean
                  example: true
          401:
            description: Unauthorized
            
    /is_superadmin/:
      get:
        tags:
        - auth
        summary: check if user is super admin
        operationId: is_superadmin
        description: |
          Check if user is superadmin 
        produces:
        - application/json
        parameters:
        - in: header
          name: Authorization
          description: auth token like "Bearer {token}"
          required: true
          type: string
        responses:
          200:
            description: Estructura
            schema:
              type: object
              properties:
                SuperAdmin:
                  type: boolean
                  example: true
          401:
            description: Unauthorized
            
    /login/:
      post:
        tags:
        - auth
        summary: login user
        operationId: login
        description: |
          Login with email and password
        produces:
        - application/json
        parameters:
        - in: body
          name: "login"
          description: Field 'totp_token' is only required if the user has 2fa activated
          schema:
            type: object
            properties:
              email:
                type: string
                example: "example@example.com"
              password:
                type: string
                example: "verysecurepassword"
              totp_token:
                type: string
                description: if user has 2fa activated this field is required
                example: "123456"
                
        responses:
          200:
            description: User information and tokens
            schema:
              type: object
              properties:
                refresh:
                  type: string
                  description: jwt refresh token
                  example: "eyJ0eXAiOiJKV1QiLCJhbGciOizf1NiJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIs,mV4cCI6MTYyMjEyODgyNSwianRpIjoiNjYwYjliYmNmsjlhNDQ3ZGE2NjkxOTA1M2YzYzVkMDMiLCJ1c2VyX2lkIjo1LCJwZXJtIjpbXX0.cLd1mS0Cs8hIsCKg_Xxj_2L4jfH0JbcPb_NZOX2RABg"
                access:
                  type: string
                  description: jwt access token
                  example: "eyJ0eXAiOiJKV1QiLCJhbGciOizf1NiJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIs,mV4cCI6MTYyMjEyODgyNSwianRpIjoiNjYwYjliYmNmsjlhNDQ3ZGE2NjkxOTA1M2YzYzVkMDMiLCJ1c2VyX2lkIjo1LCJwZXJtIjpbXX0.cLd1mS0Cs8hIsCKg_Xxj_2L4jfH0JbcPb_NZOX2RABg"
                user:
                  type: string
                  description: user name
                  example: "user"
                org:
                  type: string
                  description: organization the user belongs to
                  example: "splight"
                perms:
                  type: array
                  description: permissions or scopes the user has
                  items:
                    type: string
                    example: "DPM:211251:VW"
                date:
                  type: string
                  description: date of token creation
                  example: "2021-05-26"
                  
          401:
            description: Unauthorized
            schema:
              type: object
              properties:
                detail:
                  type: string
                  example: "No active account found with the given credentials"
                  
    /login/refresh/:
      post:
        tags:
        - auth
        summary: login user
        operationId: login-refresh
        description: |
          Login with refresh token
        produces:
        - application/json
        parameters:
        - in: body
          name: "login"
          schema:
            type: object
            properties:
              refresh:
                type: string
                example: "eyJ0eXAiOiJKV1QiLCJhbGciOizf1NiJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIs,mV4cCI6MTYyMjEyODgyNSwianRpIjoiNjYwYjliYmNmsjlhNDQ3ZGE2NjkxOTA1M2YzYzVkMDMiLCJ1c2VyX2lkIjo1LCJwZXJtIjpbXX0.cLd1mS0Cs8hIsCKg_Xxj_2L4jfH0JbcPb_NZOX2RABg"

        responses:
          200:
            description: New access token
            schema:
              type: object
              properties:
                access:
                  type: string
                  description: jwt access token
                  example: "eyJ0eXAiOiJKV1QiLCJhbGciOizf1NiJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIs,mV4cCI6MTYyMjEyODgyNSwianRpIjoiNjYwYjliYmNmsjlhNDQ3ZGE2NjkxOTA1M2YzYzVkMDMiLCJ1c2VyX2lkIjo1LCJwZXJtIjpbXX0.cLd1mS0Cs8hIsCKg_Xxj_2L4jfH0JbcPb_NZOX2RABg"
                  
          400:
            description: Bad Request
            schema:
              type: object
              properties:
                refresh:
                  type: array
                  items:
                    type: string
                    example: "This field is required."
          401:
            description: Unauthorized
            schema:
              type: object
              properties:
                detail:
                  type: string
                  example: "Token is invalid or expired"
                code:
                  type: string
                  example: "token_not_valid"
                  
    /users/:
      get:
        tags:
        - users
        summary: list users
        operationId: users_in_org
        description: |
          Get a list of the users in the organization. Caller has to be an admin.
        produces:
        - application/json
        parameters:
        - in: header
          name: Authorization
          description: auth token like "Bearer {token}"
          required: true
          type: string
        responses:
          200:
            description: list of users
            schema:
              type: array
              items:
                $ref: '#/definitions/UserInfo'
          401:
            description: Unauthorized
          403:
            description: Forbidden (Not admin)
            
    /users/{user_id}/:
      get:
        tags:
        - users
        summary: user info
        operationId: get_user_info
        description: |
          Get a list of the users in the organization. Caller has to be an admin.
        produces:
        - application/json
        parameters:
        - in: header
          name: Authorization
          description: auth token like "Bearer {token}"
          required: true
          type: string
        - in: path
          name: user_id
          description: User ID
          required: true
          type: integer
        responses:
          200:
            description: user information
            schema:
              $ref: '#/definitions/UserInfo'
          401:
            description: Unauthorized
          403:
            description: Forbidden (Not admin)
          404:
            description: User not found
            schema:
              type: object
              properties:
                detail:
                  type: string
                  example: "User doesn't exist"
            
      delete:
        tags:
        - users
        summary: delete users
        operationId: delete_user
        description: |
          Delete users in the organization. Caller has to be an admin.
        produces:
        - application/json
        parameters:
        - in: header
          name: Authorization
          description: auth token like "Bearer {token}"
          required: true
          type: string
        - in: path
          name: user_id
          description: User ID
          required: true
          type: integer
        responses:
          204:
            description: User deleted
          401:
            description: Unauthorized
          403:
            description: Forbidden (Not admin)
          404:
            description: User not found
            schema:
              type: object
              properties:
                detail:
                  type: string
                  example: "User doesn't exist"
    /users/create/:
      post:
        tags:
        - users
        summary: create a new user
        operationId: create_user
        description: |
          Create users in the organization. Caller has to be an admin.
        produces:
        - application/json
        parameters:
        - in: body
          name: body
          schema: 
            type: object
            properties:
              name: 
                type: string
                example: "username"
              surname:
                type: string
                example: "surname"
              email:
                type: string
                example: "example@example.com"
        responses:
          200:
            description: new user info
            schema:
              type: object
              properties:
                name: 
                  type: string
                  example: "username"
                id:
                  type: integer
                  example: 98231
          400: 
            description: Bad Request (missing parameters)
          401:
            description: Unauthorized
          403:
            description: Forbidden (Not admin)
    
    /users/verify/{user_id}/:
      post:
        tags:
        - users
        summary: send email
        operationId: verify_user
        description: |
          Send verification email to user
        produces:
        - application/json
        parameters:
        - in: header
          name: Authorization
          description: auth token like "Bearer {token}"
          required: true
          type: string
        - in: path
          name: user_id
          description: User ID
          required: true
          type: integer
        responses:
          200:
            description: user information
            schema:
              type: object
              properties: 
                detail:
                  type: string
                  example: email sent
          401:
            description: Unauthorized
          403:
            description: Forbidden (Not admin)
          404:
            description: User not found
            schema:
              type: object
              properties:
                detail:
                  type: string
                  example: "User doesn't exist"
                  
    /users/verify/{uidb64}/{token}/:
      patch:
        tags:
        - users
        summary: verify user
        operationId: verify_user_url
        description: |
          Send verification email to user
        produces:
        - application/json
        parameters:
        - in: path
          name: uidb64
          description: uidb64
          required: true
          type: string
        - in: path
          name: token
          description: token
          required: true
          type: string
          
        responses:
          200:
            description: Complete
          401:
            description: Unauthorized
          403:
            description: Forbidden (Not admin)
          404:
            description: User not found
            schema:
              type: object
              properties:
                detail:
                  type: string
                  example: "User doesn't exist"
                  
    /users/setpassword/{uidb64}/{token}/:
      patch:
        tags:
        - users
        summary: set password
        operationId: set_password_token
        description: |
          Set new password for user
        produces:
        - application/json
        parameters:
        - in: path
          name: uidb64
          description: uidb64
          required: true
          type: string
        - in: path
          name: token
          description: token
          required: true
          type: string
        - in: body
          name: body
          schema:
            type: object
            properties:
              password:
                type: string
                example: "new_password"
          
        responses:
          200:
            description: Complete
          401:
            description: Unauthorized
          403:
            description: Forbidden (Not admin)
          404:
            description: User not found
            schema:
              type: object
              properties:
                detail:
                  type: string
                  example: "User doesn't exist"
                  
    /users/changepassword/:
      patch:
        tags:
        - users
        summary: change password
        operationId: change_password
        description: |
          Change user password
        produces:
        - application/json
        parameters:
        - in: header
          name: Authorization
          description: auth token like "Bearer {token}"
          required: true
          type: string
        - in: body
          name: body
          schema:
            type: object
            properties:
              password:
                type: string
                description: old password
                example: "insecurepassword"
              new_password:
                type: string
                description: new password
                example: "securepassword"
        
        responses:
          200:
            description: password changed succesfully
          400:
            description: see 'detail' in response
          401:
            description: Unauthorize
            
    /users/resetpassword/:
      post:
        tags:
        - users
        summary: user info
        operationId: reset_password
        description: |
          Resest user password
        produces:
        - application/json
        parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              email:
                type: string
                example: "example@example.com"
                
        responses:
          200:
            description: user information
            schema:
              type: object
              properties: 
                detail:
                  type: string
                  example: email sent
          400:
            description: check 'detail' for error information
          401:
            description: Unauthorized
    
    /users/picture/:
      put:
        tags:
        - users
        summary: set profile picture
        operationId: set_profile_picture
        description: |
          Set profile picture for the user. Picture should be in a squared resolution.
        consumes:
        - multipart/form-data
        produces:
        - application/json
        parameters:
        - in: header
          name: Authorization
          description: auth token like "Bearer {token}"
          required: true
          type: string
        - in: formData
          name: file
          description: image file
          type: file
        responses:
          200:
            description: Picture set
            schema:
              type: object
              properties:
                url:
                  type: string
                  example: "https://s3.amazon.com/su1b19821b91bfd21.jpg"
          400:
            description: Bad request. Missing file
          401:
            description: Unauthorized
    
    /users/online/:
      get:
        tags:
        - users
        summary: get online users
        operationId: online_users
        description: |
          Get a list of the online users in the organization.
        produces:
        - application/json
        parameters:
        - in: header
          name: Authorization
          description: auth token like "Bearer {token}"
          required: true
          type: string
        responses:
          200:
            description: Picture set
            schema:
              type: array
              items:
                $ref: '#/definitions/UserInfo'
          400:
            description: Bad request. Check 'detail' in response for error information.
          401:
            description: Unauthorized
              
    /users/favorites/:
      get:
        tags:
        - favorites
        summary: list favorites
        description: |
          List all favorite instances a user has
        produces:
        - application/json
        parameters:
          - in: header
            name: Authorization
            description: auth token like "Bearer {token}"
            required: true
            type: string
        responses:
          200:
            description: ok
            schema:
              type: array
              items:
                type: object
                properties:
                  id: 
                    type: integer
                    example: 892
                  name:
                    type: string
                    example: DPM_NORTE
                  solution_type:
                    type: string
                    example: DPM
          401:
            description: Unauthorized
     
    /users/add_favorites/:
      post:
        tags:
        - favorites
        summary: add favorite instance
        description: |
          Add a new favorite instance
        produces:
        - application/json
        parameters:
        - in: header
          name: Authorization
          description: auth token like "Bearer {token}"
          required: true
          type: string
        - in: body
          name: body
          schema:
            type: object
            properties:
              instance_id:
                type: integer
                example: 1
                
        responses:
          200:
            description: ok
          400:
            description: check 'detail' for error information
          401:
            description: Unauthorized
    /users/remove_favorite/:
      delete:
        tags:
        - favorites
        summary: remove favorite instance
        description: |
          Remove favorite instance
        produces:
        - application/json
        parameters:
        - in: header
          name: Authorization
          description: auth token like "Bearer {token}"
          required: true
          type: string
        - in: body
          name: body
          schema:
            type: object
            properties:
              instance_id:
                type: integer
                example: 1
                
        responses:
          200:
            description: ok
          400:
            description: check 'detail' for error information
          401:
            description: Unauthorized
    
    /users/recents/:
      get:
        tags:
        - recents
        summary: list recent isntances
        description: |
          List user's last activity. Last instances accessed.
        produces:
        - application/json
        parameters:
          - in: header
            name: Authorization
            description: auth token like "Bearer {token}"
            required: true
            type: string
        responses:
          200:
            description: ok
            schema:
              type: array
              items:
                type: object
                properties:
                  id: 
                    type: integer
                    example: 892
                  instance_name:
                    type: string
                    example: DPM_NORTE
                  solution_type:
                    type: string
                    example: DPM
                  last_date:
                    type: string
                    example: 2021-07-15 18:57:55
          401:
            description: Unauthorized
    
    /groups/:
      get:
        tags:
        - groups
        summary: get groups
        operationId: get_groups
        description: |
          Get every group in the organization. Caller has to be admin.
        produces:
        - application/json
        parameters:
        - in: header
          name: Authorization
          description: auth token like "Bearer {token}"
          required: true
          type: string
        responses:
          200:
            description: list of groups
            schema:
              type: array
              items:
                $ref: '#/definitions/Group'
          403: 
            description: Forbidden (not admin)
      put:
        tags:
        - groups
        summary: Create a group
        operationId: create_group
        description: |
          Create a group. Caller has to be admin.
        produces:
        - application/json
        parameters:
        - in: header
          name: Authorization
          description: auth token like "Bearer {token}"
          required: true
          type: string
        - in: body
          name: body
          schema:
            type: object
            properties:
              name:
                type: string
                example: "group1"
        responses:
          201:
            description: list of groups
            schema:
              type: object
              properties:
                id:
                  type: integer
                  example: 12
                name:
                  type: string
                  example: "group1"
          400:
            description: check 'detail' for error information
          403: 
            description: Forbidden (not admin)
          
    
    /groups/{group_id}/:
      get:
        tags:
        - groups
        summary: get groups
        operationId: get_group_info
        description: |
          Get every group in the organization. Caller has to be admin.
        produces:
        - application/json
        parameters:
        - in: header
          name: Authorization
          description: auth token like "Bearer {token}"
          required: true
          type: string
        - in: path
          name: group_id
          description: Group ID
          required: true
          type: integer
        responses:
          200:
            description: group info
            schema:
              $ref: '#/definitions/Group'
          403: 
            description: Forbidden (not admin)
          404: 
            description: Group not found
      delete:
        tags:
          - groups
        summary: delete group
        operationId: delete_group
        description: |
          Delete Group. Caller has to be admin.
        produces:
        - application/json
        parameters:
        - in: header
          name: Authorization
          description: auth token like "Bearer {token}"
          required: true
          type: string
        - in: path
          name: group_id
          description: Group ID
          required: true
          type: integer
        responses:
          204:
            description: Deleted
          403: 
            description: Forbidden (not admin)
          404: 
            description: Group not found
            
    /groups/{group_id}/users/{user_id}/:
      put:
        tags:
          - groups
        summary: add user to group
        operationId: put_user_in_group
        description: |
          Add a user to a group. Caller has to be admin.
        produces:
        - application/json
        parameters:
        - in: header
          name: Authorization
          description: auth token like "Bearer {token}"
          required: true
          type: string
        - in: path
          name: group_id
          description: Group ID
          required: true
          type: integer
        - in: path
          name: user_id
          description: User ID
          required: true
          type: integer
        responses:
          200:
            description: Added user
          403: 
            description: Forbidden
      delete:
        tags:
          - groups
        summary: delete group
        operationId: delete_user_from_group
        description: |
          Delete user from Group. Caller has to be admin.
        produces:
        - application/json
        parameters:
        - in: header
          name: Authorization
          description: auth token like "Bearer {token}"
          required: true
          type: string
        - in: path
          name: group_id
          description: Group ID
          required: true
          type: integer
        - in: path
          name: user_id
          description: User ID
          required: true
          type: integer
        responses:
          204:
            description: Deleted
          403: 
            description: Forbidden
            
    /groups/{group_id}/permissions/:
      put:
        tags:
          - groups
        summary: add permissions
        operationId: add_permissions_to_group
        description: |
          Delete user from Group. Caller has to be admin.
        produces:
        - application/json
        parameters:
        - in: header
          name: Authorization
          description: auth token like "Bearer {token}"
          required: true
          type: string
        - in: path
          name: group_id
          description: Group ID
          required: true
          type: integer
        - in: body
          name: body
          required: true
          schema: 
            type: object
            properties:
              permissions:
                type: array
                description: list of permissions id
                items:
                  type: integer
                  example: 123
        responses:
          200:
            description: Added list of permissions
          400: 
            description: check 'detail' for error information
          403: 
            description: Forbidden
          404: 
            description: Not found
            
    /groups/{group_id}/permissions/{perm_id}:
      delete:
        tags:
          - groups
        summary: add permissions
        operationId: delete_permissions_to_group
        description: |
          Delete permission from Group. Caller has to be admin.
        produces:
        - application/json
        parameters:
        - in: header
          name: Authorization
          description: auth token like "Bearer {token}"
          required: true
          type: string
        - in: path
          name: group_id
          description: Group ID
          required: true
          type: integer
        - in: path
          name: perm_id
          description: Permission ID
          required: true
          type: integer
        responses:
          204:
            description: deleted list of permissions
          400: 
            description: check 'detail' for error information
          403: 
            description: Forbidden
          404: 
            description: Not found
    
    /solutions/:
      get:
        tags:
          - solutions
        summary: get solutions
        operationId: get_solutions
        description: |
          Get all solution types. Caller has to be superadmin
        produces:
        - application/json
        parameters:
        - in: header
          name: Authorization
          description: auth token like "Bearer {token}"
          required: true
          type: string
        
        responses:
          200:
            description: list of instances
            schema:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                    description: id of the instance
                    example: 1234
                  solution_type:
                    type: string
                    example: DPM
          403: 
            description: Forbidden
      post:
        tags:
        - solutions
        summary: create solution type
        operationId: create_solutions
        description: |
          Create a solution type. Caller has to be superadmin.
        produces:
        - application/json
        parameters:
        - in: header
          name: Authorization
          description: auth token like "Bearer {token}"
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema: 
            type: object
            properties:
              solution_tpye:
                type: string
                description: solution type (must be new)
                example: "gdt"
        responses:
          201:
            description: Created
            schema:
              type: object
              properties:
                solution_type:
                  type: string
                  example: "gdt"
                id:
                  type: integer
                  example: 1
          400: 
            description: check 'detail' in response for error information
          401:
            description: Unauthorized
          403: 
            description: Forbidden
    
    /instances/:
      get:
        tags:
          - instances
        summary: get instances
        operationId: get_instances
        description: |
          Get instances the user has permissions in
        produces:
        - application/json
        parameters:
        - in: header
          name: Authorization
          description: auth token like "Bearer {token}"
          required: true
          type: string
        
        responses:
          200:
            description: list of instances
            schema:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                    description: id of the instance
                    example: 1234
                  name:
                    type: string
                    example: "dpm_norte"
                  solution_type:
                    type: string
                    example: DPM
          403: 
            description: Forbidden
            
    /permissions/:
      get:
        tags:
          - permissions
        summary: get permissions
        operationId: get_permissions
        description: |
          Get list of available permissions in an organization. Caller has to be admin.
        produces:
        - application/json
        parameters:
        - in: header
          name: Authorization
          description: auth token like "Bearer {token}"
          required: true
          type: string
        
        responses:
          200:
            description: list of permissions
            schema:
              type: array
              items:
                $ref: '#/definitions/Permission'
          403: 
            description: Forbidden
            
    /organizations/:
      get:
        tags:
        - organizations
        summary: List organizaitons
        operationId: list_organizatoins
        description: |
          Return a list of all the organizations 
          The user must be a superadmin
        produces:
        - application/json
        parameters:
        - in: header
          name: Authorization
          description: auth token like "Bearer {token}"
          required: true
          type: string
        responses:
          200:
            description: Estructura
            schema:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    example: "Splight"
                  id:
                    type: integer
                    example: 1
          401:
            description: Unauthorized
      post:
        tags:
        - organizations
        summary: Create organizaiton
        operationId: create_organizatoins
        description: |
          Givena valid name create a new organization 
          The user must be a superadmin
        produces:
        - application/json
        parameters:
        - in: header
          name: Authorization
          description: auth token like "Bearer {token}"
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema: 
            type: object
            properties:
              name:
                type: string
                description: organization's name (must not be alreay in use)
                items:
                  type: string
                  example: "splight"
        responses:
          201:
            description: Estructura
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Splight"
                id:
                  type: integer
                  example: 1
          400: 
            description: check 'detail' for error information
          401:
            description: Unauthorized
    
    /organizations/{org_id}/instances/:
      get:
        tags:
        - organizations
        summary: List organization's instances
        operationId: list_instances
        description: |
          List all the instances that an organziation has access to. 
          The user must be a superadmin
        produces:
        - application/json
        parameters:
        - in: header
          name: Authorization
          description: auth token like "Bearer {token}"
          required: true
          type: string
        - in: path
          name: org_id
          description: Organization ID
          required: true
          type: integer
        responses:
          200:
            description: Estructura
            schema:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    example: "Instance test"
                  solution_type:
                    type: string
                    example: 'DPM'
                  id:
                    type: integer
                    example: 1
          401:
            description: Unauthorized
          404:
            description: Not found
      post:
        tags:
        - organizations
        summary:  Create instance
        operationId: create_instances
        description: |
          Create a new instance and add it to the organization
          The user must be a superadmin
        produces:
        - application/json
        parameters:
        - in: header
          name: Authorization
          description: auth token like "Bearer {token}"
          required: true
          type: string
        - in: path
          name: org_id
          description: Organization ID
          required: true
          type: integer
        - in: body
          name: body
          required: true
          schema: 
            type: object
            properties:
              name:
                type: string
                description: instace name
              solution_id:
                type: integer
                description: solution id
        responses:
          201:
            description: Created
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Instance test"
                solution_type:
                  type: string
                  example: 'DPM'
                id:
                  type: integer
                  example: 1
          400: 
            description: check 'detail' for error information
          401:
            description: Unauthorized
          404:
            description: Not found
    
    /organizations/{org_id}/admins/:
      get:
        tags:
        - organizations
        summary: List organization's admins
        operationId: list_admins
        description: |
          List all the users whith admins level that work for an organziation. 
          The user must be a superadmin
        produces:
        - application/json
        parameters:
        - in: header
          name: Authorization
          description: auth token like "Bearer {token}"
          required: true
          type: string
        - in: path
          name: org_id
          description: Organization ID
          required: true
          type: integer
        responses:
          200:
            description: Estructura
            schema:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    example: "test"
                  surname:
                    type: string
                    example: "test"
                  email:
                    type: string
                    example: "test@test.com"
                  is_verified:
                    type: boolean
                    example: True
                  time_created:
                    type: string
                    example: "2021-05-28T18:29:13.384299Z"
                  id:
                    type: string
                    example: 1
                  employer:
                    type: string
                    example: 1
          401:
            description: Unauthorized
          404:
            description: Not found
      post:
        tags:
        - organizations
        summary: Create admins user
        operationId: create_admins
        description: |
          Create a new user whith admin lever for an organization. 
          The user must be a superadmin
        produces:
        - application/json
        parameters:
        - in: header
          name: Authorization
          description: auth token like "Bearer {token}"
          required: true
          type: string
        - in: path
          name: org_id
          description: Organization ID
          required: true
          type: integer
        - in: body
          name: body
          required: true
          schema: 
            type: object
            properties:
              name:
                type: string
                description: user's name
              surname:
                type: string
                description: user's surname
              email:
                type: string
                description: user's email
        responses:
          201:
            description: Created
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "test"
                surname:
                  type: string
                  example: "test"
                email:
                  type: string
                  example: "test@test.com"
                is_verified:
                  type: boolean
                  example: True
                time_created:
                  type: string
                  example: "2021-05-28T18:29:13.384299Z"
                id:
                  type: string
                  example: 1
                employer:
                  type: string
                  example: 1
          400:
            description: check 'detail' for error information
          401:
            description: Unauthorized
          404:
            description: Not found
            
    /organizations/{org_id}/admins/{user_id}/verify/:  
      post:
        tags:
        - organizations
        summary: Send verification email
        operationId: send_verify_admins
        description: |
          Send a verification email to an admin in an organization.
          The user must be a superadmin
        produces:
        - application/json
        parameters:
        - in: header
          name: Authorization
          description: auth token like "Bearer {token}"
          required: true
          type: string
        - in: path
          name: org_id
          description: Organization ID
          required: true
          type: integer
        - in: path
          name: user_id
          description: User ID
          required: true
          type: integer
        responses:
          200:
            description: Email sent
            schema:
              type: object
              properties:
                detail:
                  type: string
                  example: "email sent"
          400:
            description: check 'detail' for error information
          401:
            description: Unauthorized
          404:
            description: Not found
            
            
    /users/2fa/activate/:
      patch:
        tags:
        - 2fa
        summary: Activate 2fa
        operationId: activate_2fa
        description: |
          Activate 2fa with totp in applications like Google Authenticator. This endpoint returns the URI that has to be converted to QR for the user to scan.
        produces:
        - application/json
        parameters:
        - in: header
          name: Authorization
          description: auth token like "Bearer {token}"
          required: true
          type: string
        responses:
          200:
            description: Activated
            schema:
              type: object
              properties:
                uri:
                  type: string
                  example: "oauth://totp/Splight..."
          400:
            description: check 'detail' in response for error information
          401:
            description: Unauthorized
            
    /logs/:
      get:
        tags:
        - logs
        summary: Get user logs
        operationId: get_logs
        description: |
          Get logs of user activity. Returns endpoint calls made by the specified user. Calles has to be dpm admin.
        produces:
        - application/json
        parameters:
        - in: header
          name: Authorization
          description: auth token like "Bearer {token}"
          required: true
          type: string
        - in: query
          name: user_id
          type: integer
          required: true
        - in: query
          name: page
          required: true
          type: integer
          minimum: 0
        - in: query
          name: page_size
          required: true
          type: integer
          minimum: 0
          maximum: 50
        - in: query
          name: from
          required: true
          description: "dd/mm/yyyy  date format"
          type: string
        - in: query
          name: to
          required: true
          description: "dd/mm/yyyy  date format"
          type: string
        responses:
          200:
            description: Estructura
            schema:
              type: array
              items:
                type: object
                properties:
                  level:
                    type: string
                    example: INFO
                  date:
                    type: string
                    example: 2021-06-17 13:58:32,811
                  message:
                    type: string
                    example: relay access
                  app:
                    type: string
                    example: DPM
                  remote_address:
                    type: string
                    example: 192.168.1.1
                  user_id:
                    type: integer
                    example: 1
                  request_method:
                    type: string
                    example: POST
                  request_path:
                    type: string
                    example: /dpm/1/relays/
          400:
            description: Bad request. Check detail in response for error information
          401:
            description: Unauthorized
          403:
            description: Forbidden

            
  definitions:
    
    UserInfo:
      type: object
      properties:
        id:
          type: integer
          example: 12452
        email:
          type: string
          example: "example@example.com"
        name:
          type: string
          example: "user"
        surname:
          type: string
          example: "lastname"
        is_verified:
          type: boolean
          example: true
        time_created:
          type: string
          example: "2021-05-27T14:46:20.877619Z"
        exmployer:
          type: integer
          example: 534
        profile_picture:
          type: string
          example: "https://s3.amazon.com/default.jpg"
    
    Permission:
      type: object
      properties:
        id:
          type: integer
          example: 931
        solution_type:
          type: string
          example: "DPM"
        level:
          type: string
          example: VW
        instance_name: 
          type: string
          example: "dpm_norte"
      
    PermissionString:
      type: string
      example: "DPM:109872:VW"
    
    Group:
      type: object
      properties:
        id:
          type: integer
          example: 12452
        name:
          type: string
          example: "group_name"
        users:
          type: array
          items:
            $ref: '#/definitions/UserInfo'
        permissions:
          type: array
          items:
            $ref: '#/definitions/PermissionString'
contentType: yaml
